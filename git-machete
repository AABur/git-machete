#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import getopt
import itertools
import os
import subprocess
import sys
import textwrap

VERSION = '1.5.0'


# Core utils

class MacheteException(Exception):
    def __init__(self, value):
        self.parameter = value

    def __str__(self):
        return str(self.parameter)


ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
GREEN = '\033[32m'
GREY = '\033[37m'
YELLOW = '\033[93m'
RED = '\033[91m'


def non_empty_lines(s):
    return filter(None, s.split("\n"))


def excluding(l, s):
    return filter(lambda x: x not in s, l)


def join_branch_names(bs, sep):
    return sep.join("`%s'" % x for x in bs)


def split_array(arr, sep):
    res = []
    start_new = True
    for elem in arr:
        if elem == sep:
            start_new = True
        else:
            if start_new:
                res.append([])
                start_new = False
            res[-1].append(elem)
    return res


def replace_in_array(arr, orig, dst):
    for i in range(len(arr)):
        if arr[i] == orig:
            arr[i] = dst


def pick(choices, name):
    xs = "".join("[%i] %s\n" % (idx + 1, x) for x, idx in zip(choices, range(len(choices))))
    msg = xs + "Specify " + name + " or hit <return> to skip: "
    try:
        idx = int(raw_input(msg)) - 1
    except ValueError:
        sys.exit(1)
    if idx not in range(len(choices)):
        raise MacheteException("Invalid index: %i" % (idx + 1))
    return choices[idx]


def run_cmd(cmd, *args):
    return subprocess.call([cmd] + list(args))


def popen_cmd(cmd, *args):
    process = subprocess.Popen([cmd] + list(args), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdoutdata, stderrdata = process.communicate()
    return process.returncode, stdoutdata


# Git core

def run_git(git_cmd, *args, **kwargs):
    flat_cmd = " ".join(["git", git_cmd] + list(args))
    if opt_verbose:
        print >> sys.stderr, " ".join(["git", git_cmd] + list(args))
    status = run_cmd("git", git_cmd, *args)
    if not kwargs.get("allow_non_zero") and status != 0:
        raise MacheteException("`%s' returned %i" % (flat_cmd, status))
    return status


def popen_git(git_cmd, *args, **kwargs):
    flat_cmd = " ".join(["git", git_cmd] + list(args))
    if opt_verbose:
        print >> sys.stderr, flat_cmd
    status, stdout = popen_cmd("git", git_cmd, *args)
    if not kwargs.get("allow_non_zero") and status != 0:
        raise MacheteException("`%s' returned %i" % (flat_cmd, status))
    return stdout


# Manipulation with definition file/tree of branches

def expect_in_managed_branches(b):
    if b not in managed_branches:
        raise MacheteException("Branch `%s' not found in the tree. "
                               "Use `git machete add %s' or `git machete edit'" % (b, b))


def read_definition_file():
    global definition_file, indent, managed_branches, down_branches, up_branch, roots, annotations

    with open(definition_file) as f:
        ldr = [l.rstrip() for l in f.readlines() if not l.isspace()]

    managed_branches = []
    down_branches = {}
    up_branch = {}
    indent = None
    roots = []
    annotations = {}
    at_depth = {}
    last_depth = -1
    hint = "Edit the definition file manually with `git machete edit'"

    for idx, l in enumerate(ldr):
        pfx = "".join(itertools.takewhile(str.isspace, l))
        if pfx and not indent:
            indent = pfx

        b_a = l.strip().split(" ", 1)
        b = b_a[0]
        if len(b_a) > 1:
            annotations[b] = b_a[1]
        if b in managed_branches:
            raise MacheteException("%s, line %i: branch `%s' re-appears in the tree definition. %s" %
                                   (definition_file, idx + 1, b, hint))
        managed_branches += [b]

        if pfx:
            depth = len(pfx) / len(indent)
            if pfx != indent * depth:
                mapping = { " ": "<SPACE>", "\t": "<TAB>" }
                pfx_expanded = "".join(mapping[c] for c in pfx)
                indent_expanded = "".join(mapping[c] for c in indent)
                raise MacheteException("%s, line %i: invalid indent `%s`, expected a multiply of `%s`. %s" %
                                       (definition_file, idx + 1, pfx_expanded, indent_expanded, hint))
        else:
            depth = 0

        if depth > last_depth + 1:
            raise MacheteException("%s, line %i: too much indent (level %s, expected at most %s) for the branch `%s'. %s" %
                                   (definition_file, idx + 1, depth, last_depth + 1, b, hint))
        last_depth = depth

        at_depth[depth] = b
        if depth:
            p = at_depth[depth - 1]
            up_branch[b] = p
            if p in down_branches:
                down_branches[p] += [b]
            else:
                down_branches[p] = [b]
        else:
            roots += [b]


def render_definition_file():
    global roots, down_branches, indent, annotations
    if not indent:
        indent = "\t"

    def render_dfs(u, d):
        annotation = (" " + annotations[u]) if u in annotations else ""
        res = [d * indent + u + annotation]
        for v in down_branches.get(u) or []:
            res += render_dfs(v, d + 1)
        return res

    total = []
    for r in roots:
        total += render_dfs(r, 0)
    return total


def save_definition_file():
    with open(definition_file, "w") as f:
        f.write("\n".join(render_definition_file()))


def down(b, pick_mode):
    expect_in_managed_branches(b)
    dbs = down_branches.get(b)
    if not dbs or len(dbs) == 0:
        raise MacheteException("Branch `%s' has no downstream branch" % b)
    elif len(dbs) == 1:
        return dbs[0]
    elif pick_mode:
        return pick(dbs, "downstream branch")
    else:
        return "\n".join(dbs)


def next_branch(b):
    expect_in_managed_branches(b)
    idx = managed_branches.index(b) + 1
    if idx == len(managed_branches):
        raise MacheteException("Branch `%s' has no successor" % b)
    return managed_branches[idx]


def prev_branch(b):
    expect_in_managed_branches(b)
    idx = managed_branches.index(b) - 1
    if idx == -1:
        raise MacheteException("Branch `%s' has no predecessor" % b)
    return managed_branches[idx]


def root_branch(b):
    expect_in_managed_branches(b)
    u = up_branch.get(b)
    if not u:
        raise MacheteException("Branch `%s' is already a root" % b)
    while u:
        b = u
        u = up_branch.get(b)
    return b


def up(b):
    expect_in_managed_branches(b)
    pb = up_branch.get(b)
    if pb:
        return pb
    else:
        raise MacheteException("Branch `%s' has no upstream branch" % b)


def add(b):
    global roots

    if b in managed_branches:
        raise MacheteException("Branch `%s' already exists in the tree" % b)

    if not is_a_branch(b):
        raise MacheteException("Branch `%s' does not exist" % b)

    onto = opt_onto
    if onto:
        expect_in_managed_branches(onto)
    if not roots:
        roots = [b]
    else:
        if not onto:
            h = head()
            if b != h:
                onto = h
            else:
                raise MacheteException("Specify the desired upstream (parent) branch for `%s' with `--onto'" % b)

        up_branch[b] = onto
        if onto in down_branches:
            down_branches[onto].append(b)
        else:
            down_branches[onto] = [b]
    save_definition_file()


# Git/shell commands impl

def edit():
    return run_cmd(os.environ.get("EDITOR") or "vim", definition_file)


def get_git_dir():
    return popen_git("rev-parse", "--git-dir").strip()


def compute_sha_by_refspec(refspec):
    try:
        return popen_git("rev-parse", "--verify", "--quiet", refspec).rstrip()
    except MacheteException:
        return None


remotes_cached = None


def remotes():
    global remotes_cached
    if remotes_cached is None:
        remotes_cached = non_empty_lines(popen_git("remote"))
    return remotes_cached


def remote_for_branch(b):
    try:
        return popen_git("config", "branch." + b + ".remote").rstrip()
    except MacheteException:
        return None


shas_cached = {}


def sha_by_refspec(refspec):
    global shas_cached
    if refspec not in shas_cached:
        shas_cached[refspec] = compute_sha_by_refspec(refspec)
    return shas_cached[refspec]


def is_a_branch(refspec):
    try:
        result = popen_git("rev-parse", "--abbrev-ref", refspec).strip()
        return result != ''
    except MacheteException:
        return False


def head():
    try:
        return popen_git("symbolic-ref", "--short", "--quiet", "HEAD").strip()
    except MacheteException:
        raise MacheteException("Not currently on any branch")


def is_ancestor(earlier, later):
    return run_git("merge-base", "--is-ancestor", earlier, later, allow_non_zero=True) == 0


def log(branch):
    return non_empty_lines(popen_git("log", "--format=%H", branch, "--"))


reflogs_cached = {}


def reflog(b):
    global reflogs_cached
    if b not in reflogs_cached:
        # %H - full hash
        # %gs - reflog subject
        reflogs_cached[b] = [entry.split("|") for entry in non_empty_lines(popen_git("reflog", "--format=%H|%gs", b, "--"))]
    return reflogs_cached[b]


branches_cached = None


def fork_point(b):
    global branches_cached
    if not is_a_branch(b):
        raise MacheteException("Branch `%s' does not exist" % b)

    def valid_subject(gs):
        return not (
            (gs.startswith("branch: Created from") and not gs.startswith("branch: Created from refs/remotes/")) or
            gs.startswith("branch: Reset to " + b) or
            gs.startswith("branch: Reset to HEAD")
        )

    log_this_branch = log(b)
    if not branches_cached:
        branches_cached = branches()
    other_branches = excluding(branches_cached, [b])
    reflogs_other_branches = sum(map(reflog, other_branches), [])
    reflogs_other_branches_no_create = set(h for (h, gs) in reflogs_other_branches if valid_subject(gs))
    for h in log_this_branch:
        if h in reflogs_other_branches_no_create:
            return h
    raise MacheteException("Cannot find fork point for branch `%s'" % b)


def branches(extra_option = None):
    lines = non_empty_lines(popen_git("branch", *([extra_option] if extra_option else [])))
    # Filter out e.g. `* (no branch, rebasing ...)' entry during an ongoing rebase
    return [b[2:] for b in lines if not b.startswith("* (")]


def go(branch):
    run_git("checkout", "--quiet", branch, "--")


def update(branch, fork_commit):
    run_git("rebase", "--interactive", "--onto", up(branch), fork_commit, branch)


def reapply(branch, fork_commit):
    run_git("rebase", "--interactive", "--onto", fork_commit, fork_commit, branch)


def diff(branch):
    params = (["--stat"] if opt_stat else []) + [fork_point(branch if branch else head())] + ([branch] if branch else []) + ["--"]
    run_git("diff", *params)


def prune_branches():
    merged_bs = excluding(branches("--merged"), managed_branches)
    unmerged_bs = excluding(branches("--no-merged"), managed_branches)
    all_to_prune = merged_bs + unmerged_bs
    if all_to_prune:
        for b in all_to_prune:
            is_merged = b in merged_bs
            msg = "Remove the branch %s%s%s (%s to HEAD)? [y/n] " % (BOLD, b, ENDC, "merged" if is_merged else "unmerged")
            if raw_input(msg).lower() not in ('y', 'yes'):
                continue
            run_git("branch", "-d" if is_merged else "-D", b)
    else:
        print >> sys.stderr, "No branches to remove"


def slide_out(bs):
    for b in bs:
        expect_in_managed_branches(b)
        u = up_branch.get(b)
        if not u:
            raise MacheteException("No upstream branch defined for `%s', cannot slide out" % b)
        dbs = down_branches.get(b)
        if not dbs or len(dbs) == 0:
            raise MacheteException("No downstream branch defined for `%s', cannot slide out" % b)
        elif len(dbs) > 1:
            flat_dbs = join_branch_names(dbs, ", ")
            raise MacheteException("Multiple downstream branches defined for `%s': %s; cannot slide out" % (b, flat_dbs))

    for bu, bd in zip(bs[:-1], bs[1:]):
        if up_branch[bd] != bu:
            raise MacheteException("`%s' is not upstream of `%s', cannot slide out" % (bu, bd))

    u = up_branch[bs[0]]
    d = down_branches[bs[-1]][0]
    for b in bs:
        up_branch[b] = None
        down_branches[b] = None

    go(d)
    up_branch[d] = u
    down_branches[u] = [(d if x == bs[0] else x) for x in down_branches[u]]
    save_definition_file()
    update(d, opt_down_fork_point or fork_point(d))


def traverse():
    global up_branch, empty_line_status, managed_branches

    def flush():
        global reflogs_cached, shas_cached
        reflogs_cached = {}
        shas_cached = {}

    empty_line_status = True

    def print_new_line(new_status):
        global empty_line_status
        if not empty_line_status:
            print
        empty_line_status = new_status

    hb = head()
    expect_in_managed_branches(hb)

    for b in itertools.dropwhile(lambda x: x != hb, managed_branches):
        u = up_branch.get(b)
        needs_rebase = u and not (is_ancestor(u, b) and sha_by_refspec(u) == fork_point(b))
        needs_push = needs_sync_with_remote(b)

        if b != hb and (needs_rebase or needs_push):
            print_new_line(False)
            print >> sys.stderr, "Checking out %s%s%s" % (BOLD, b, ENDC)
            go(b)
            hb = b
            print_new_line(False)
            status()
            print_new_line(True)
        if needs_rebase:
            print_new_line(False)
            ans = raw_input("Rebase %s%s%s onto %s%s%s? [y/n/q] " % (BOLD, b, ENDC, BOLD, u, ENDC)).lower()
            if ans in ('y', 'yes'):
                update(b, fork_point(b))
                flush()
                needs_push = needs_sync_with_remote(b)
            elif ans in ('q', 'quit'):
                return
        if needs_push:
            remote = opt_remote or "origin"
            print_new_line(False)
            ans = raw_input("Push %s%s%s with force to %s%s%s? [y/n/q] " % (BOLD, b, ENDC, BOLD, remote, ENDC)).lower()
            if ans in ('y', 'yes'):
                run_git("push", "--force", "--", remote, b)
                flush()
            elif ans in ('q', 'quit'):
                return
    print_new_line(False)
    status()
    print
    msg = "Reached branch %s%s%s which has no successor" if hb == managed_branches[-1] else "No successor of %s%s%s needs sync with upstream branch or remote"
    print >> sys.stderr, msg % (BOLD, hb, ENDC) + "; nothing left to update"


def needs_sync_with_remote(b):
    b_sha = sha_by_refspec(b)
    if not b_sha:
        raise MacheteException("Branch `%s' does not exist" % b)
    if not remotes():
        return False
    remote = remote_for_branch(b)
    b_origin_sha = sha_by_refspec(remote + "/" + b)
    if not b_origin_sha:
        return False
    return b_sha != b_origin_sha


def get_remote_sync_status(b):
    NO_REMOTES = ""
    UNTRACKED = YELLOW + " (untracked)" + ENDC
    UNTRACKED_ON = RED + " (untracked on %s)" + ENDC
    IN_SYNC_WITH_REMOTE = ""
    BEHIND_REMOTE = RED + " (behind `%s')" + ENDC
    AHEAD_OF_REMOTE = RED + " (ahead of `%s')" + ENDC
    DIVERGED_FROM_REMOTE = RED + " (diverged from `%s')" + ENDC

    if not remotes():
        return NO_REMOTES
    remote = remote_for_branch(b)
    if not remote:
        return UNTRACKED
    rb = remote + "/" + b
    if not is_a_branch(rb):
        return UNTRACKED_ON % b
    if is_ancestor(b, rb):
        return IN_SYNC_WITH_REMOTE if is_ancestor(rb, b) else BEHIND_REMOTE % remote
    else:
        return AHEAD_OF_REMOTE % remote if is_ancestor(rb, b) else DIVERGED_FROM_REMOTE % remote


def commits_between(earlier, later):
    return non_empty_lines(popen_git("log", "--format=%s", "^" + earlier, later, "--"))


def status():
    dfs_res = []

    def dfs(u, pfx):
        dfs_res.append((u, pfx))
        if down_branches.get(u):
            for (v, nv) in zip(down_branches[u][:-1], down_branches[u][1:]):
                dfs(v, pfx + [nv])
            dfs(down_branches[u][-1], pfx + [None])

    for u in roots:
        dfs(u, [])

    needs_sync_with_up_branch = {}
    remote_sync_status = {}
    commits_cached = {}
    fork_points_cached = {}
    for b, pfx in dfs_res:
        if not is_a_branch(b):
            raise MacheteException("Branch `%s' does not exist" % b)
        if b in up_branch:
            needs_sync_with_up_branch[b] = not is_ancestor(up_branch[b], b)
            try:
                fork_points_cached[b] = fork_point(b)
            except MacheteException:
                fork_points_cached[b] = None
            if opt_list_commits:
                commits_cached[b] = reversed(commits_between(fork_points_cached[b], b)) if fork_points_cached[b] else []
        shas_cached[b] = compute_sha_by_refspec(b)
        remote_sync_status[b] = get_remote_sync_status(b)

    def edge_color(b):
        return RED if needs_sync_with_up_branch[b] else (GREEN if shas_cached[up_branch[b]] == fork_points_cached[b] else YELLOW)

    def print_line_prefix(b, suffix):
        sys.stdout.write("  ")
        for p in pfx[:-1]:
            if not p:
                sys.stdout.write("  ")
            else:
                sys.stdout.write(edge_color(p) + "│ " + ENDC)
        sys.stdout.write(edge_color(b) + suffix + ENDC)

    try:
        h = head()
    except MacheteException:
        h = None

    for b, pfx in dfs_res:
        current = BOLD + b + ENDC + "  " + GREY + annotations[b] + ENDC if b in annotations else BOLD + b + ENDC
        current_ul = UNDERLINE + current + ENDC if b == h else current
        if b in up_branch:
            print_line_prefix(b, "│ \n")
            if opt_list_commits:
                for msg in commits_cached[b]:
                    print_line_prefix(b, "│ " + GREY + msg + "\n")
            print_line_prefix(b, "└─")
        else:
            if b != dfs_res[0][0]:
                print
            sys.stdout.write("  ")
        print current_ul + remote_sync_status[b]


# Main

def usage(c=None):
    short_docs = {
        "add": "Add a branch on the top of the current or other specified branch",
        "diff": "Diff current working tree or a given branch against a computed fork point",
        "down": "Print name(s) of the downstream branch(es) for a branch (aka its children in the tree)",
        "edit": "Edit the definition file",
        "file": "Print path of the definition file",
        "fork-point": "Print SHA of the computed fork point commit of a branch",
        "format": "Format of the definition file",
        "go": "Check out the branch relative to the position of the current branch, accepts down/next/root/prev/up argument",
        "help": "Print this overview, or print detailed help for a specified command",
        "list": "Lists all branches that fall into one of pre-defined categories (mostly for internal use)",
        "next": "Print name of the next branch for a branch",
        "prev": "Print name of the previous branch for a branch",
        "prune-branches": "Remove local branches that are not in the definition file",
        "reapply": "Rebase the current branch onto its computed fork point",
        "root": "Print name of the root branch of the tree where a branch is located",
        "slide-out": "Slide the current branch out and rebase its downstream (child) branch onto its upstream (parent) branch",
        "status": "Print tree-shaped status of branches listed in the definition file, including info on their sync with upstream branch and remote",
        "traverse": "Walk through the tree and ask to rebase and/or push branches, one by one",
        "up": "Print name of the upstream branch for a branch (aka parent in the tree)",
        "update": "Rebase the current branch onto its upstream (parent) branch"
    }
    long_docs = {
        "add": """
            Usage: git machete add [-o|--onto=<target-upstream-branch>] [<branch>]

            Adds the given branch (or the current branch, if none specified) to the definition file.
            If the definition file is empty, the branch will be added as the first root of the tree.
            Otherwise, the branch will be added on the top of the current branch.
            If the current branch is the same as the branch to be added (esp. in the case when the new branch to add has not been specified at all),
            the target parent branch must be explicitly specified with `--onto' option.

            Note: the same effect can be always achieved by manually editing the definition file.

            Options:
            -o, --onto=<target-upstream-branch>    Specifies the target parent branch to add the new branch onto.
        """,
        "diff": """
            Usage: git machete d[iff] [-s|--stat] [<branch>]

            Runs `git diff' of the given branch tip against its fork point or, if none specified, of the current working tree against the fork point of the currently checked out branch.
            See `git machete help fork-point' for more details on meaning of the "fork point".

            Since the result of the command does not depend on the tree of branch dependencies, the branch in question does not need to occur in the definition file.

            Options:
            -s, --stat    Makes `git machete diff' pass `--stat' option to `git diff', so that only summary (diffstat) will be output.
        """,
        "down":  """
            Usage: git machete down [<branch>]

            Outputs name of the branch (or branches, if many) that are direct children of the given branch (or current branch, if none specified).
        """,
        "edit": """
            Usage: git machete e[dit]

            Opens the editor (as defined by the `EDITOR' environment variable, or `vim' if undefined) and lets you edit the definition file manually.
            The definition file can be always accessed under path returned by `git machete file' (currently fixed to <repo-root>/.git/machete).
        """,
        "file": """
            Usage: git machete file

            Outputs the path of the machete definition file (currently fixed to <repo-root>/.git/machete).
        """,
        "fork-point": """
            Usage: git machete fork-point [<branch>]

            Outputs SHA of the fork point commit for the given branch (the commit at which the history of the branch actually diverges from history of any other branch).
            If no branch is specified, the currently checked out branch is assumed.

            The returned fork point will be assumed as the default place where the history of the branch starts in the commands `diff', `reapply', `slide-out', and most notably `update'.
            In other words, `git machete' treats the fork point as the most recent commit in the log of the given branch that has NOT been introduced on that very branch, but on some other (usually earlier) branch.

            Since the result of the command does not depend on the tree of branch dependencies, the branch in question does not need to occur in the definition file.

            Note: to determine this place in history, `git machete' uses a heuristics based on reflogs of local branches.
            This yields a correct result in typical cases, but there are some situations (esp. when some local branches have been deleted) where the fork point might not be determined correctly.
            Thus, all rebase-involving operations (`reapply', `slide-out' and `update') run `git rebase' in the interactive mode and allow to specify the fork point explictly by a command-line option.

            Also, `git machete fork-point' is different (and more powerful) than `git merge-base --fork-point', since the latter takes into account only the reflog of the one provided upstream branch,
            while the former scans reflogs of all local branches.
            This makes machete's `fork-point' work correctly even when the tree definition has been modified and one or more of the branches changed their corresponding upstream branch.
        """,
        "format": """
            The format of the definition file should be as follows:

            develop
                adjust-reads-prec PR #234
                    block-cancel-order PR #235
                        change-table
                            drop-location-type
                edit-margin-not-allowed
                    full-load-gatling
                grep-errors-script
            master
                hotfix/receipt-trigger PR #236

            In the above example `develop' and `master' are roots of the branch tree.
            Branches `adjust-reads-prec', `edit-margin-not-allowed' and `grep-errors-script' are direct downstream branches for `develop'.
            `block-cancel-order' is a downstream branch of `adjust-reads-prec', `change-table' is a downstream branch of `block-cancel-order' and so on.

            Every branch name can be followed (after a single space as a delimiter) by a custom annotation - a PR number in the above example.
            The annotation doesn't influence the way `git machete' operates other than that those annotation are displayed in the output of the `status' subcommand.

            Tabs or any number of spaces can be used as indentation.
            It's only important to be consistent wrt. the sequence of characters used for indentation between all lines.
        """,
        "go": """
            Usage: git machete g[o] <direction>
            where <direction> is one of: d[own], n[ext], p[rev], r[oot], u[p]

            Checks out the branch specified by the given direction relative to the currently checked out branch.
            Roughly equivalent to `git checkout $(git machete <direction>)'.
        """,
        "help": """
            Usage: git machete help [<command>]

            Prints a summary of this tool, or a detailed info on a command if defined.
        """,
        "list": """
            Usage: git machete list <category>
            where <category> is one of: managed, slidable, unmanaged

            Lists all branches that fall into one of the specified categories:
            - `managed': all branches that appear in the definition file,
            - `slidable': all managed branches that have exactly one upstream and one downstream (i.e. the ones that can be slid out with `slide-out' subcommand),
            - `unmanaged': all local branches that don't appear in the definition file.

            This command is generally not meant for a day-to-day use, it's mostly needed for the sake of branch name completion in shell.
        """,
        "next": """
            Usage: git machete next [<branch>]

            Outputs name of the branch that directly follows the given branch (or current branch, if none specified) in the definition file.
        """,
        "prev": """
            Usage: git machete prev [<branch>]

            Outputs name of the branch that directly precedes the given branch (or current branch, if none specified) in the definition file.
        """,
        "prune-branches": """
            Usage: git machete prune-branches

            Goes one-by-one through all the local git branches that don't exist in the definition file, and ask to remove each of them (with `git branch -d' or `git branch -D') if confirmed by user.
            No branch will be removed unless explicitly confirmed by the user.

            Note: this should be used with care since removing local branches can sometimes make it impossible for `git machete' to properly compute fork points.
            See `git machete help fork-point' for more details.
        """,
        "reapply": """
            Usage: git machete reapply [-f|--fork-point=<fork-point-commit>]

            Interactively rebase the current branch on the top of its computed fork point.
            This is useful e.g. for squashing the commits on the current branch to make history more condensed before push to the remote.
            The chunk of the history to be rebased starts at the automatically computed fork point of the current branch by default, but can also be set explicitly by `--fork-point'.
            See `git machete help fork-point' for more details on meaning of the "fork point".

            Since the result of the command does not depend on the tree of branch dependencies, the current reapplied branch does not need to occur in the definition file.

            Options:
            -f, --fork-point=<fork-point-commit>    Specifies the alternative fork point commit after which the rebased part of history is meant to start.
        """,
        "root": """
            Usage: git machete root [<branch>]

            Outputs name of the branch that is the root of the tree where the given branch (or current branch, if none specified) is located.
            Depending on your case, this will typically be something like `develop' or `master', since all branches are usually meant to be ultimately merged to one of those.
        """,
        "slide-out": """
            Usage: git machete slide-out [-d|--down-fork-point=<down-fork-point-commit>] <branch> [<branch> [<branch> ...]]

            Removes the given branch (or multiple branches) from the branch tree definition.
            Then, rebases the downstream (child) branch of the last specified branch on the top of the upstream (parent) branch of the first specified branch.
            The most common use is to slide out a single branch whose upstream was a `develop'/`master' branch and that has been recently merged.

            Since this tool is designed to perform only one rebase at the end, provided branches must form a chain, i.e the following conditions must be met:
            * (n+1)-th branch must be the ONLY downstream branch of the n-th branch.
            * all provided branches must have exactly one downstream branch (even if only one branch is to be slid out)
            * all provided branches must have an upstream branch (so, in other words, roots of branch dependency tree cannot be slid out - also applies if only one branch is specified).

            For example, let's assume the following dependency tree:

            develop
                adjust-reads-prec
                    block-cancel-order
                        change-table
                            drop-location-type

            And now let's assume that `adjust-reads-prec' and later `block-cancel-order' were merged to develop.
            After running `git machete slide-out adjust-reads-prec block-cancel-order' the tree will be reduced to:

            develop
                change-table
                    drop-location-type

            and `change-table' will be rebased onto develop (fork point for this rebase is configurable, see `-d' option below).

            Note: This command doesn't delete any branches from git, just removes them from the tree of branch dependencies.

            Options:
            -d, --down-fork-point=<down-fork-point-commit>    Specifies the alternative fork-point commit after which the rebased part of history of the downstream branch should start.
                                                              See also doc for `--fork-point' option for `git machete help reapply' and `git machete help update'.
        """,
        "status": """
            Usage: git machete s[tatus] [-l|--list-commits] [-r|--remote=<remote-name>]

            Outputs a tree-shaped status of the branches listed in the definition file.

            Apart from simply ASCII-formatting the definition file, this also:
            * prints `(out of sync with <remote>)' message for each branch that differs from its remote counterpart (in the `origin' remote by default);
            * colors the edges between upstream (parent) and downstream (children) branches depending on whether downstream branch commit is a direct descendant of the upstream branch commit:
              - red edge means that the downstream branch commit is NOT a direct descendant of the upstream branch commit (basically, the downstream branch is out of sync with its upstream branch),
              - yellow means that the opposite holds true, i.e. the downstream branch is in sync with its upstream branch, but the fork point of the downstream branch is a different commit than upstream branch tip,
              - green means that downstream branch is in sync with its upstream branch (so just like for yellow edge) and the fork point of downstream branch is EQUAL to the upstream branch tip.
            * displays the custom annotations (see help on `format') next to each branch, if present;
            * optionally lists commits introduced on each branch if `--list-commits' is supplied.

            Note: in practice, both yellow and red edges suggest that the downstream branch should be updated against its upstream.
            Yellow typically indicates that there are/were commits from some other branches on the path between upstream and downstream and that a closer look at the log of the downstream branch might be necessary.

            Options:
            -l, --list-commits            Additionally lists the messages of commits introduced on each branch.
            -r, --remote=<remote-name>    Specifies the alternative name of the remote (`origin' by default).
        """,
        "traverse": """
            Usage: git machete traverse [-l|--list-commits]

            Traverses the branch dependency in pre-order (i.e. simply in the order as they occur in the definition file) and for each branch:
            * if the branch is not in "green" sync with its parent/upstream - see help for `status':
              - prompts the user whether to rebase the branch onto into its upstream branch - equivalent to `git machete update' with no options passed;
            * if the branch is out of sync with its remote counterpart:
              - prompts the user whether to push the branch (with `--force');
            * if user confirmed either of those operations:
              - prints the updated `status'.

            Options:
            -l, --list-commits    Additionally lists the messages of commits introduced on each branch when printing the status.
        """,
        "up": """
            Usage: git machete up [<branch>]

            Outputs name of the branch that is the direct parent of the given branch (or current branch, if none specified).
        """,
        "update": """
            Usage: git machete update [-f|--fork-point=<fork-point-commit>]

            Interactively rebase the current branch on the top of its upstream (parent) branch.
            This is useful e.g. for syncing the current branch with changes introduced by an upstream branch like `develop', or changes commited on the parent branches.
            The chunk of the history to be rebased starts at the automatically computed fork point of the current branch by default, but can also be set explicitly by `--fork-point'.
            See `git machete help fork-point' for more details on meaning of the "fork point".

            Options:
            -f, --fork-point=<fork-point-commit>    Specifies the alternative fork point commit after which the rebased part of history is meant to start.
        """
    }
    aliases = {
        "diff": "d",
        "edit": "e",
        "go": "g",
        "status": "s"
    }
    groups = [
        ("General topics", ["format", "help"]),
        ("Modify and display the tree of branches", ["add", "edit", "file", "list", "status"]),
        ("Navigate between the branches", ["down", "go", "next", "prev", "root", "up"]),
        ("Determine changes specific to the given branch", ["diff", "fork-point"]),
        ("Update history in accordance with the tree of branches", ["reapply", "slide-out", "traverse", "update"]),
        ("Tidy up git branches", ["prune-branches"])
    ]
    if c and c in short_docs:
        print >> sys.stderr, textwrap.dedent(long_docs[c])
    else:
        short_usage()
        if c and c not in short_docs:
            print >> sys.stderr, "\nUnknown command: `%s'" % c
        print >> sys.stderr, "\n%sTL;DR tip%s\n\n    Get familiar with the help for %sformat%s, %sedit%s, %sstatus%s and %supdate%s, in this order.\n" % (
            UNDERLINE, ENDC, BOLD, ENDC, BOLD, ENDC, BOLD, ENDC, BOLD, ENDC
        )
        for hdr, cmds in groups:
            print >> sys.stderr, UNDERLINE + hdr + ENDC + "\n"
            for cm in cmds:
                alias = (", " + aliases[cm]) if cm in aliases else ""
                print >> sys.stderr, "    %s%-16s%s%s" % (BOLD, cm + alias, ENDC, short_docs[cm])
            print >> sys.stderr
        print >> sys.stderr, textwrap.dedent("""
            %sGeneral options%s\n
                -h, --help       Prints help and exits.
                -v, --verbose    Logs the executed git commands.
                --version        Prints version and exits.
        """[1:] % (UNDERLINE, ENDC))


def short_usage():
    print >> sys.stderr, "Usage: git machete [--help] [--verbose] [--version] <command> [command-specific options] [command-specific argument]"


def version():
    print 'git-machete version ' + VERSION


def parse_options(in_args, short_opts="", long_opts=[], gnu=True):
    global cmd, opt_down_fork_point, opt_fork_point, opt_list_commits, opt_onto, opt_remote, opt_stat, opt_verbose

    fun = getopt.gnu_getopt if gnu else getopt.getopt
    opts, rest = fun(in_args, short_opts + "hv", long_opts + ['help', 'verbose', 'version'])

    for opt, arg in opts:
        if opt in ("-d", "--down-fork-point"):
            opt_down_fork_point = arg
        elif opt in ("-f", "--fork-point"):
            opt_fork_point = arg
        elif opt in ("-h", "--help"):
            usage(cmd)
            sys.exit()
        elif opt in ("-l", "--list-commits"):
            opt_list_commits = True
        elif opt in ("-o", "--onto"):
            opt_onto = arg
        elif opt in ("-r", "--remote"):
            opt_remote = arg
        elif opt in ("-s", "--stat"):
            opt_stat = True
        elif opt in ("-v", "--verbose"):
            opt_verbose = True
        elif opt == "--version":
            version()
            sys.exit()
    return rest


def expect_no_param(in_args, extra_explanation = ''):
    if len(in_args) > 0:
        raise MacheteException("No argument expected for `%s'%s" % (cmd, extra_explanation))


def check_optional_param(in_args):
    if not in_args:
        return None
    elif len(in_args) > 1:
        raise MacheteException("`%s' accepts at most one argument" % cmd)
    elif not in_args[0]:
        raise MacheteException("Argument to `%s' cannot be empty" % cmd)
    elif in_args[0][0] == "-":
        raise MacheteException("option `%s' not recognized" % in_args[0])
    else:
        return in_args[0]


def check_required_param(in_args, allowed_values):
    if not in_args or len(in_args) > 1:
        raise MacheteException("`%s' expects an argument: one of %s" % (cmd, allowed_values))
    elif not in_args[0]:
        raise MacheteException("Argument to `%s' cannot be empty; expected one of %s" % (cmd, allowed_values))
    elif in_args[0][0] == "-":
        raise MacheteException("option `%s' not recognized" % in_args[0])
    else:
        return in_args[0]


try:
    cmd = None
    opt_down_fork_point = None
    opt_fork_point = None
    opt_list_commits = False
    opt_onto = None
    opt_remote = None
    opt_stat = False
    opt_verbose = False

    all_args = parse_options(sys.argv[1:], gnu=False)
    if not all_args:
        usage()
        sys.exit(2)
    cmd = all_args[0]
    args = all_args[1:]

    if cmd not in ("format", "help"):
        try:
            git_dir = get_git_dir()
        except MacheteException:
            raise MacheteException("Not a git repository")

        definition_file = os.path.join(git_dir, "machete")
        if not os.path.exists(definition_file):
            open(definition_file, 'w').close()

    if cmd not in ("d", "diff", "e", "edit", "file", "fork-point", "format", "help", "reapply"):
        read_definition_file()

    if cmd == "add":
        param = check_optional_param(parse_options(args, "o:", ["onto="]))
        add(param or head())
    elif cmd in ("d", "diff"):
        param = check_optional_param(parse_options(args, "s", ["stat"]))
        diff(param) # passing None if not specified
    elif cmd == "down":
        param = check_optional_param(parse_options(args))
        print down(param or head(), pick_mode=False)
    elif cmd in ("e", "edit"):
        expect_no_param(parse_options(args))
        edit()
    elif cmd == "file":
        expect_no_param(parse_options(args))
        print definition_file
    elif cmd == "fork-point":
        param = check_optional_param(parse_options(args))
        print fork_point(param or head())
    elif cmd == "format":
        usage("format")
    elif cmd in ("g", "go"):
        allowed_values = "d[own]|n[ext]|p[rev]|r[oot]|u[p]"
        param = check_required_param(parse_options(args), allowed_values)
        h = head()
        if param in ("d", "down"):
            dest = down(h, pick_mode=True)
        elif param in ("n", "next"):
            dest = next_branch(h)
        elif param in ("p", "prev"):
            dest = prev_branch(h)
        elif param in ("r", "root"):
            dest = root_branch(h)
        elif param in ("u", "up"):
            dest = up(h)
        else:
            raise MacheteException("Usage: git machete go " + allowed_values)
        if dest != h:
            go(dest)
    elif cmd == "help":
        param = check_optional_param(parse_options(args))
        usage(param)
    elif cmd == "list":
        allowed_values = "managed|slidable|unmanaged"
        param = check_required_param(parse_options(args), allowed_values)
        if param == "managed":
            res = managed_branches
        elif param == "slidable":
            res = [b for b in managed_branches if b in up_branch and b in down_branches and len(down_branches[b]) == 1]
        elif param == "unmanaged":
            res = excluding(branches(), managed_branches)
        else:
            raise MacheteException("Usage: git machete list " + allowed_values)
        print "\n".join(res),
    elif cmd == "next":
        param = check_optional_param(parse_options(args))
        print next_branch(param or head())
    elif cmd == "prev":
        param = check_optional_param(parse_options(args))
        print prev_branch(param or head())
    elif cmd == "prune-branches":
        expect_no_param(parse_options(args, "f", ["force"]))
        prune_branches()
    elif cmd == "reapply":
        args1 = parse_options(args, "f:", ["fork-point="])
        expect_no_param(args1, ". Use `-f' or `--fork-point' to specify the fork point commit")
        h = head()
        reapply(h, opt_fork_point or fork_point(h))
    elif cmd == "root":
        param = check_optional_param(parse_options(args))
        print root_branch(param or head())
    elif cmd == "slide-out":
        params = parse_options(args, "d:", ["down-fork-point="])
        slide_out(params or [head()])
    elif cmd in ("s", "status"):
        expect_no_param(parse_options(args, "lr:", ["list-commits", "remote="]))
        status()
    elif cmd == "traverse":
        expect_no_param(parse_options(args, "lr:", ["list-commits", "remote="]))
        traverse()
    elif cmd == "up":
        param = check_optional_param(parse_options(args))
        print up(param or head())
    elif cmd == "update":
        args1 = parse_options(args, "f:", ["fork-point="])
        expect_no_param(args1, ". Use `-f' or `--fork-point' to specify the fork point commit")
        h = head()
        update(h, opt_fork_point or fork_point(h))
    else:
        short_usage()
        raise MacheteException("\nUnknown command: `%s'. Use `git machete help' to list possible commands" % cmd)

except MacheteException as e:
    print >> sys.stderr, str(e)
    sys.exit(1)
except getopt.GetoptError as e:
    short_usage()
    print >> sys.stderr, str(e)
    sys.exit(2)

