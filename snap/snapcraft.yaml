name: git-machete
adopt-info: git-machete
summary: git-machete is a versatile tool for organizing your git repo
description: |
  git machete is a versatile tool for organizing your git repo, including features like:
  - Neat, customizable `git machete status` that shows what branches are in sync with their parent branch/remote tracking branch and which of them need to be rebased/merged/pulled/pushed
  - Semi-automatic `git machete traverse` through the branches that helps you effortlessly rebase/merge and push/pull the branches you care for
  - Automatic discovery of branch relations (`git machete discover`)
# This software is unlikely to be used outside of desktop machines.
# Let's limit the number of target architectures to reduce the build times.
architectures:
  # See https://forum.snapcraft.io/t/how-can-i-publish-a-snap-that-can-provide-binaries-for-all-the-supported-architectures/8556/4
  # on why not just `build-on: [ amd64, i386 ]`.
  - build-on: amd64
  - build-on: i386
base: core18
confinement: strict
grade: stable
icon: logo.png
license: MIT

plugs:
  gitconfig:
    interface: personal-files
    read:
      - $HOME/.gitconfig
      - $HOME/.config/git/config
      # TODO: consider including Vim configuration files

layout:
  # Configuration for ssh should come from the snap's part(s), not from the target system.
  # core18 has OpenSSH 7.x which doesn't understand certain aspects (like `Match final`) of OpenSSH 8.x config.
  # If the target system has OpenSSH 8.x, then all ssh-backed actions in git are bound to fail.
  /etc/ssh:
    bind: $SNAP/etc/ssh
  /usr/bin/vim:
    symlink: $SNAP/usr/bin/vim.basic

parts:
  git-machete:
    plugin: python
    python-version: python3
    source: .
    # We're setting the version via scriptlet rather than using `version: git`
    # since only pushing commits to master (and not pushing tags) triggers Snapcraft builds.
    override-pull: |
      set -x
      snapcraftctl pull
      snapcraftctl set-version "$(grep "__version__ = " git_machete/__init__.py | cut -d\' -f2)"
    # Note that's not trivial to force the 'stage' step to use a non-standard source of packages like a PPA
    # (which e.g. would allow to install latest version of git: https://launchpad.net/~git-core/+archive/ubuntu/ppa),
    # see https://forum.snapcraft.io/t/what-sources-are-used-for-stage-packages/2875/10 for details
    stage-packages:
      - git
      - libgpm2  # needed by vim for mouse handling
      - openssh-client
      - vim  # for `git machete edit`, interactive rebases and merge message edit
      # TODO: consider installing `nano` as well

apps:
  git-machete:
    command: bin/git-machete
    environment:
      # Use this exec path rather than the (apparently default) /usr/libexec/git-core
      GIT_EXEC_PATH: $SNAP/usr/lib/git-core
      # Required for Python's `sys.stdout.write` to correctly print non-ASCII characters in status
      LC_ALL: C.UTF-8
    plugs:
      - home
      - removable-media
      - gitconfig
    adapter: full
